<?php

/**
 * @file
 * Theme specific functionality.
 */

use Drupal\Core\Render\Markup;

/**
 * Implements hook_preprocess_html().
 */
function yukonca_glider_preprocess_html(&$variables) {
  $logged_in = \Drupal::currentUser()->isAuthenticated();
  if ($logged_in) {
    $variables['#attached']['library'][] = 'yukonca_glider/administrator';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function yukonca_glider_preprocess_links__language_block(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // Remove the active language from the list.
  unset($variables['links'][$language]);
}

/**
 * Implements template_preprocess_block() for block templates.
 */
function yukonca_glider_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'system_branding_block') {
    $logo_file = $variables['site_logo'];
    $pathinfo = pathinfo($logo_file);
    $variables['site_footer_logo'] = $pathinfo['dirname'] . '/images/svg/logo-white.svg';
  }
}

/**
 * Implements template_preprocess_node().
 */
function yukonca_glider_preprocess_node(&$variables) {
  $type = $variables['node']->bundle();
  $view_mode = $variables['view_mode'];
  if (!empty($type) && $type === 'landing_page' && $view_mode === 'primary_item_block') {
    // Render only the first three links in field_primary_content.
    $links = $variables['node']->field_primary_content->getValue();
    foreach ($links as $key => $link) {
      if ($key > 2) {
        unset($variables['content']['field_primary_content'][$key]);
      }
    }
  }

  if (!empty($type) && $type === 'campground_directory_record') {
    $services_fields = [
      $variables['node']->field_outhouse_unisex,
      $variables['node']->field_bear_proof_garbage_bins,
      $variables['node']->field_bear_proof_recycling_bins,
      $variables['node']->field_picnic_tables,
      $variables['node']->field_cook_shelter,
      $variables['node']->field_fire_ring,
      $variables['node']->field_bear_proof_cache,
      $variables['node']->field_boat_launch,
      $variables['node']->field_boat_dock,
      $variables['node']->field_hiking_trails,
      $variables['node']->field_playground,
      $variables['node']->field_at_least_one_wheelchair_ac,
      $variables['node']->field_one_wheelchair_camp,
      $variables['node']->field_hand_pump_or_water_tank_pr,
      $variables['node']->field_sandy_or_cobble_beach_with,
      $variables['node']->field_viewing_structures_or_sign,
      $variables['node']->field_interpretive_centre,
      $variables['node']->field_group_campsite,
      $variables['node']->field_tent_pads_or_sites_availab,
      $variables['node']->field_swimming_area_or_dock_no_l,
      $variables['node']->field_change_room,
      $variables['node']->field_outdoor_ampitheatre,
      $variables['node']->field_walk_in_sites,
    ];

    $availability_fields = [
      $variables['node']->field_may_availability,
      $variables['node']->field_june_availability,
      $variables['node']->field_july_availability,
      $variables['node']->field_august_availability,
      $variables['node']->field_september_availability,
    ];

    $availability = [];
    $is_empty_chart = TRUE;
    foreach ($availability_fields as $field) {
      $title = $field->getFieldDefinition()->getLabel();
      $title = str_replace(' availability', '', $title);
      $availability[] = [
        'title' => $title,
        'value' => $field->value,
      ];

      if ($field->value != 'na') {
        $is_empty_chart = FALSE;
      }
    }

    if ($is_empty_chart) {
      $variables['availability'] = $variables['content']['field_campground_site_type'][0]['#plain_text'];
    }
    else {
      $variables['availability'] = $availability;
    }

    $available_services = [];
    foreach ($services_fields as $field) {
      $field_name = $field->getName();
      $field_name = str_replace('field_', '', $field_name);
      $available_services[] = [
        'name' => $field_name,
        'title' => $field->getFieldDefinition()->getLabel(),
        'value' => $field->value,
      ];
    }
    $variables['available_services'] = $available_services;
  }
}

/**
 * Implements template_proprocess_page().
 */
function yukonca_glider_preprocess_page(&$variables) {
  if (!empty($variables['node'])) {
    $bundle = $variables['node']->bundle();
    $node = $variables['node'];
    if (!empty($node->field_icon_dark) && !empty($node->field_icon_dark[0])) {
      $image = $node->field_icon_dark[0]->view([
        'type' => 'entity_reference_entity_view',
        'label' => 'hidden',
      ]);
      $variables['header_image'] = $image;
    }

    if ($bundle == 'blog' || $bundle == 'default') {
      $tid = $node->field_blog_type->target_id;
      if (!empty($tid)) {
        $blog_type_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
        if (!empty($blog_type_term->field_agency_logo && !empty($blog_type_term->field_agency_logo[0]))) {
          $image = $blog_type_term->field_agency_logo[0]->view([
            'type' => 'entity_reference_entity_view',
            'label' => 'hidden',
          ]);
          $variables['logo_url'] = $image;
        }
      }

      $variables['blog_category_subcategory'] = [];
      if (!empty($node->field_category_term->target_id)) {
        $category_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($node->field_category_term->target_id);
        array_push($variables['blog_category_subcategory'], $category_term->getName());
      }

      if (!empty($node->field_subcategory->target_id)) {
        $subcategory_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($node->field_subcategory->target_id);
        array_push($variables['blog_category_subcategory'], $subcategory_term->getName());
      }
    }
  }
}

/**
 * Implements template_preprocess_comment.
 */
function yukonca_glider_preprocess_comment(&$variables) {
  $date_formatter = \Drupal::service('date.formatter');
  $comment = $variables['elements']['#comment'];
  $variables['created'] = $date_formatter->format($comment->getCreatedTime(), 'yg_long');
}

/**
 * Implements template_preprocess_file_link().
 *
 * Use the media entity name as file link text if there is no description.
 */
function yukonca_glider_preprocess_file_link(&$variables) {
  if (is_string($variables['link'])) {
    return;
  }
  if (is_object($variables['link'])) {
    // Ensure we are working with a renderable array, as that's
    // just easier.
    $variables['link'] = $variables['link']->toRenderable();
  }
  $icon = '<i class="fa fa-download" aria-hidden="true"></i>';
  $filename = $variables['link']['#title'];
  $link_text = Markup::create('<span class="link-text flex-grow mr-2">Download</span><span class="icon">' . $icon . '</span>');
  $variables['link']['#title'] = $link_text;
  $variables['link']['#attributes']['class'][] = 'btn btn-outline-primary';
  $variables['link']['#attributes']['target'] = '_blank';
  $variables['filename'] = $filename;
}
